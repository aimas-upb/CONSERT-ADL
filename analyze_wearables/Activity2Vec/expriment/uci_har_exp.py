# -*- coding: utf-8 -*-
"""UCI_HAR_exp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ITKw5x4dfvfI7gsjW1rAfefkTcuLfT5

Licensed under the MIT License.

# Activity2Vec: Learning ADL Embeddings from Sensor Data with a Sequence-to-Sequence Model

This notebook provides an example of how to train an Act2Vec model to extract features. We will train an Act2Vec based model on the describe in the paper refrence blow.

In this notebook, we will train an Act2Vec model on UCI-HAR data, and then employ a random forest as our classifier.

Reference: https://arxiv.org/abs/1907.05597
"""

# Import packages
import os
import sys
sys.path.insert(0, os.path.abspath('../'))
import tensorflow as tf
import numpy as np
from datasets.har import load_data
from model.act2vec import Act2Vec
from util.utils import plot_latent_space
from util.utils import rf
from util.utils import plot_confusion_matrix
from util.utils import print_result

# allow tenserflow to use GPU
physical_devices = tf.config.experimental.list_physical_devices('GPU')
assert len(physical_devices) > 0, "Not enough GPU hardware devices available"
tf.config.experimental.set_memory_growth(physical_devices[0], True)
os.environ['AUTOGRAPH_VERBOSITY'] = '10'
tf.autograph.set_verbosity(0)

"""## UCI-HAR dataset

Let's start with downloading dataset, and load the datasets. 
"""

(x_train, y_train), (x_test, y_test) = load_data()

print('x_train shape is: ', x_train.shape)
print('x_test shape is: ', x_test.shape)
print('Number of classes: ', len(np.unique(y_train)))

"""## Encode the data by employing Act2Vec model

### Building an Act2Vec Model
"""

act2vec = Act2Vec(units=128, input_dim=x_train.shape)
opt = tf.keras.optimizers.Adam(lr=2e-5, decay=2e-11)
act2vec.compile(loss='mse',
             optimizer=opt,
             metrics=['mse'])

# train the act2vec moedl
act2vec.fit(x_train,x_train,
         batch_size=32,
         epochs=4000)
act2vec.save_weights('HAR-act2vec_model.h5')

"""### After taining the act2vec model, we can use it to extract fetures"""

X_train = act2vec.encoder(x_train)
X_test = act2vec.encoder(x_test)

print('Encoded X_train shape is: ', X_train.shape)
print('Encoded X_test shape is: ', X_test.shape)

plot_latent_space(X_train, y_train, 'UCI_HAR_Xtrain_latentspace')

"""### Train random forest on encoded data"""

random_forest_en = rf(X_train, y_train, n_estimators=100)

print_result(random_forest_en, X_train, y_train, X_test, y_test)

LABELS = ['WALKING', 'WALKING_UPSTAIRS', 'WALKING_DOWNSTAIRS', 'SITTING', 'STANDING', 'LAYING']
plot_confusion_matrix(random_forest_en, X_test, y_test, class_names=LABELS, file_name='HAR_confusionmatrix_en', normalize=True)

"""### Train random forest on raw data"""

random_forest_raw = rf(x_train.reshape(X_train.shape[0], np.prod(x_train.shape[1:])), y_train, n_estimators=100)

print_result(random_forest_raw, x_train.reshape(x_train.shape[0], np.prod(x_train.shape[1:])), y_train, x_test.reshape(x_test.shape[0], np.prod(x_test.shape[1:])), y_test)

LABELS = ['WALKING', 'WALKING_UPSTAIRS', 'WALKING_DOWNSTAIRS', 'SITTING', 'STANDING', 'LAYING']
plot_confusion_matrix(random_forest_raw, x_test.reshape(x_test.shape[0], np.prod(x_test.shape[1:])), y_test, class_names=LABELS, file_name='HAR_confusionmatrix_raw', normalize=True)

